//===-- VC4ISelDAGToDAG.cpp - A dag to dag inst selector for VideoCore-IV -===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the VC4 target.
//
//===----------------------------------------------------------------------===//

#include "VC4.h"
#include "VC4TargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetLowering.h"

using namespace llvm;

/// VC4DAGToDAGISel - VC4 specific code to select VC4 machine
/// instructions for SelectionDAG operations.
///
namespace {
  class VC4DAGToDAGISel : public SelectionDAGISel {
  public:
    VC4DAGToDAGISel(VC4TargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

    void Select(SDNode *N) override;

    // Include the pieces autogenerated from the target description.
#include "VC4GenDAGIsel.inc"
  };
} // end anonymous namespace

/// createVC4ISelDag - This pass converts a legalized DAG into a
/// VC4-specific DAG, ready for instruction scheduling.
///
FunctionPass*
llvm::createVC4ISelDag(VC4TargetMachine &TM, CodeGenOpt::Level OptLevel) {
  return new VC4DAGToDAGISel(TM, OptLevel);
}

void
VC4DAGToDAGISel::Select(SDNode* N) {
  SDLoc dl(N);
  switch (N->getOpcode()) {
  default: break;
  }
  SelectCode(N);
}
